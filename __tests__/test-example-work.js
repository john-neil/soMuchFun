import React from 'react';
import { shallow } from 'enzyme';
import ExampleWork, { ExampleWorkBubble } from '../js/example-work';

import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16.3';

Enzyme.configure({ adapter: new Adapter() });

const myWork = [

    {
      'title': "Zoom",
      'image': {
        'desc': "example screenshot of a project involving code",
        'src': "images/myVacationProperty.jpeg",
        'comment': ""
      }
    },
    {
      'title': "Zoom1",
      'image': {
        'desc': "screenshot of a project involving code",
        'src': "images/ex1.png",
        'comment': ""
      }
    }

];

describe("ExampleWork component", () =>{
  let component = shallow(<ExampleWork work={myWork} />); // but it's expecting props. . . and you can't just import because tests should be dependent on data, so you "stub it out" by "borrowing" a subset of data for tests
  // also, component is generated by enzyme, tldr is that it only renders one layer.  you want this for independent testing
  it("Should be a 'section' element", () =>{
    expect(component.type()).toEqual('section');
   });

   it("Should contain as many children as there are work examples", () => {
     expect(component.find("ExampleWorkBubble").length).toEqual(myWork.length); // can't figure out how to make it fail
   })
});

describe("ExampleWorkBubble component", () => {
  let component = shallow(<ExampleWorkBubble example={myWork[1]}/>); // problem is with data structures . . . need to also get it to grab desc and source

  let images = component.find("img");

  it("Should contain a single 'img' element", () => {
    expect(images.length).toEqual(1);
  });

  // let srcs = component.find("srcs")

  //it("Should have the image src set correctly", () => {
  //  .getElementById("src").toEqual(myWork[1].image.src);
  //  expect(images.props('src')).toEqual(myWork[0].image.src);
  // })
})
